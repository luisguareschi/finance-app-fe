// @ts-nocheck

/**
 * Auto Generated by orval
 * Do not edit manually.
 * BaseApp Backend API
 * API para el sistema de BaseApp Backend
 */

import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { PatchedUser, User } from "../baseAppBackendAPI.schemas";
import { customAxios } from "../../lib/axiosInstance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I,
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

export const usersList = (signal?: AbortSignal) => {
  return customAxios<User[]>({ url: `/api/users/`, method: "GET", signal });
};

export const getUsersListQueryKey = () => {
  return [`/api/users/`] as const;
};

export const getUsersListQueryOptions = <
  TData = Awaited<ReturnType<typeof usersList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof usersList>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersList>>> = ({
    signal,
  }) => usersList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type UsersListQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersList>>
>;
export type UsersListQueryError = unknown;

export function useUsersList<
  TData = Awaited<ReturnType<typeof usersList>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof usersList>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof usersList>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useUsersList<
  TData = Awaited<ReturnType<typeof usersList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof usersList>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof usersList>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUsersList<
  TData = Awaited<ReturnType<typeof usersList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof usersList>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useUsersList<
  TData = Awaited<ReturnType<typeof usersList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof usersList>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getUsersListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const usersCreate = (user: NonReadonly<User>, signal?: AbortSignal) => {
  return customAxios<User>({
    url: `/api/users/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: user,
    signal,
  });
};

export const getUsersCreateMutationOptions = <
  TData = Awaited<ReturnType<typeof usersCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<User> },
    TContext
  >;
}) => {
  const mutationKey = ["usersCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersCreate>>,
    { data: NonReadonly<User> }
  > = (props) => {
    const { data } = props ?? {};

    return usersCreate(data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<User> },
    TContext
  >;
};

export type UsersCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersCreate>>
>;
export type UsersCreateMutationBody = NonReadonly<User>;
export type UsersCreateMutationError = unknown;

export const useUsersCreate = <
  TData = Awaited<ReturnType<typeof usersCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<User> },
    TContext
  >;
}): UseMutationResult<TData, TError, { data: NonReadonly<User> }, TContext> => {
  const mutationOptions = getUsersCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const usersRetrieve = (id: number, signal?: AbortSignal) => {
  return customAxios<User>({ url: `/api/users/${id}/`, method: "GET", signal });
};

export const getUsersRetrieveQueryKey = (id: number) => {
  return [`/api/users/${id}/`] as const;
};

export const getUsersRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof usersRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersRetrieve>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersRetrieveQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersRetrieve>>> = ({
    signal,
  }) => usersRetrieve(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof usersRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type UsersRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersRetrieve>>
>;
export type UsersRetrieveQueryError = unknown;

export function useUsersRetrieve<
  TData = Awaited<ReturnType<typeof usersRetrieve>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersRetrieve>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersRetrieve>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useUsersRetrieve<
  TData = Awaited<ReturnType<typeof usersRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersRetrieve>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersRetrieve>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUsersRetrieve<
  TData = Awaited<ReturnType<typeof usersRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersRetrieve>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useUsersRetrieve<
  TData = Awaited<ReturnType<typeof usersRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersRetrieve>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getUsersRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const usersUpdate = (id: number, user: NonReadonly<User>) => {
  return customAxios<User>({
    url: `/api/users/${id}/`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: user,
  });
};

export const getUsersUpdateMutationOptions = <
  TData = Awaited<ReturnType<typeof usersUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<User> },
    TContext
  >;
}) => {
  const mutationKey = ["usersUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersUpdate>>,
    { id: number; data: NonReadonly<User> }
  > = (props) => {
    const { id, data } = props ?? {};

    return usersUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<User> },
    TContext
  >;
};

export type UsersUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersUpdate>>
>;
export type UsersUpdateMutationBody = NonReadonly<User>;
export type UsersUpdateMutationError = unknown;

export const useUsersUpdate = <
  TData = Awaited<ReturnType<typeof usersUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<User> },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { id: number; data: NonReadonly<User> },
  TContext
> => {
  const mutationOptions = getUsersUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const usersPartialUpdate = (
  id: number,
  patchedUser: NonReadonly<PatchedUser>,
) => {
  return customAxios<User>({
    url: `/api/users/${id}/`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: patchedUser,
  });
};

export const getUsersPartialUpdateMutationOptions = <
  TData = Awaited<ReturnType<typeof usersPartialUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<PatchedUser> },
    TContext
  >;
}) => {
  const mutationKey = ["usersPartialUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersPartialUpdate>>,
    { id: number; data: NonReadonly<PatchedUser> }
  > = (props) => {
    const { id, data } = props ?? {};

    return usersPartialUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<PatchedUser> },
    TContext
  >;
};

export type UsersPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersPartialUpdate>>
>;
export type UsersPartialUpdateMutationBody = NonReadonly<PatchedUser>;
export type UsersPartialUpdateMutationError = unknown;

export const useUsersPartialUpdate = <
  TData = Awaited<ReturnType<typeof usersPartialUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<PatchedUser> },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { id: number; data: NonReadonly<PatchedUser> },
  TContext
> => {
  const mutationOptions = getUsersPartialUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const usersDestroy = (id: number) => {
  return customAxios<void>({ url: `/api/users/${id}/`, method: "DELETE" });
};

export const getUsersDestroyMutationOptions = <
  TData = Awaited<ReturnType<typeof usersDestroy>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: number }, TContext>;
}) => {
  const mutationKey = ["usersDestroy"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersDestroy>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return usersDestroy(id);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: number },
    TContext
  >;
};

export type UsersDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersDestroy>>
>;

export type UsersDestroyMutationError = unknown;

export const useUsersDestroy = <
  TData = Awaited<ReturnType<typeof usersDestroy>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: number }, TContext>;
}): UseMutationResult<TData, TError, { id: number }, TContext> => {
  const mutationOptions = getUsersDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};
export const usersMeRetrieve = (signal?: AbortSignal) => {
  return customAxios<User>({ url: `/api/users/me/`, method: "GET", signal });
};

export const getUsersMeRetrieveQueryKey = () => {
  return [`/api/users/me/`] as const;
};

export const getUsersMeRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof usersMeRetrieve>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof usersMeRetrieve>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersMeRetrieveQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersMeRetrieve>>> = ({
    signal,
  }) => usersMeRetrieve(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersMeRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type UsersMeRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersMeRetrieve>>
>;
export type UsersMeRetrieveQueryError = unknown;

export function useUsersMeRetrieve<
  TData = Awaited<ReturnType<typeof usersMeRetrieve>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof usersMeRetrieve>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof usersMeRetrieve>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useUsersMeRetrieve<
  TData = Awaited<ReturnType<typeof usersMeRetrieve>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof usersMeRetrieve>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof usersMeRetrieve>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUsersMeRetrieve<
  TData = Awaited<ReturnType<typeof usersMeRetrieve>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof usersMeRetrieve>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useUsersMeRetrieve<
  TData = Awaited<ReturnType<typeof usersMeRetrieve>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof usersMeRetrieve>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getUsersMeRetrieveQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
