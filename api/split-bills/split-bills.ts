// @ts-nocheck

/**
 * Auto Generated by orval
 * Do not edit manually.
 * BaseApp Backend API
 * API para el sistema de BaseApp Backend
 */

import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  Bill,
  BillGroup,
  BillGroupMember,
  PatchedBill,
  PatchedBillGroup,
  PatchedBillGroupMember,
} from "../baseAppBackendAPI.schemas";
import { customAxios } from "../../lib/axiosInstance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I,
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

export const splitBillsBillGroupMembersList = (signal?: AbortSignal) => {
  return customAxios<BillGroupMember[]>({
    url: `/api/split-bills/bill-group-members/`,
    method: "GET",
    signal,
  });
};

export const getSplitBillsBillGroupMembersListQueryKey = () => {
  return [`/api/split-bills/bill-group-members/`] as const;
};

export const getSplitBillsBillGroupMembersListQueryOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof splitBillsBillGroupMembersList>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSplitBillsBillGroupMembersListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof splitBillsBillGroupMembersList>>
  > = ({ signal }) => splitBillsBillGroupMembersList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof splitBillsBillGroupMembersList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type SplitBillsBillGroupMembersListQueryResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillGroupMembersList>>
>;
export type SplitBillsBillGroupMembersListQueryError = unknown;

export function useSplitBillsBillGroupMembersList<
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersList>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof splitBillsBillGroupMembersList>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof splitBillsBillGroupMembersList>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useSplitBillsBillGroupMembersList<
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof splitBillsBillGroupMembersList>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof splitBillsBillGroupMembersList>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useSplitBillsBillGroupMembersList<
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof splitBillsBillGroupMembersList>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useSplitBillsBillGroupMembersList<
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof splitBillsBillGroupMembersList>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getSplitBillsBillGroupMembersListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const splitBillsBillGroupMembersCreate = (
  billGroupMember: NonReadonly<BillGroupMember>,
  signal?: AbortSignal,
) => {
  return customAxios<BillGroupMember>({
    url: `/api/split-bills/bill-group-members/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: billGroupMember,
    signal,
  });
};

export const getSplitBillsBillGroupMembersCreateMutationOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<BillGroupMember> },
    TContext
  >;
}) => {
  const mutationKey = ["splitBillsBillGroupMembersCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof splitBillsBillGroupMembersCreate>>,
    { data: NonReadonly<BillGroupMember> }
  > = (props) => {
    const { data } = props ?? {};

    return splitBillsBillGroupMembersCreate(data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<BillGroupMember> },
    TContext
  >;
};

export type SplitBillsBillGroupMembersCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillGroupMembersCreate>>
>;
export type SplitBillsBillGroupMembersCreateMutationBody =
  NonReadonly<BillGroupMember>;
export type SplitBillsBillGroupMembersCreateMutationError = unknown;

export const useSplitBillsBillGroupMembersCreate = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<BillGroupMember> },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { data: NonReadonly<BillGroupMember> },
  TContext
> => {
  const mutationOptions =
    getSplitBillsBillGroupMembersCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const splitBillsBillGroupMembersRetrieve = (
  id: string,
  signal?: AbortSignal,
) => {
  return customAxios<BillGroupMember>({
    url: `/api/split-bills/bill-group-members/${id}/`,
    method: "GET",
    signal,
  });
};

export const getSplitBillsBillGroupMembersRetrieveQueryKey = (id: string) => {
  return [`/api/split-bills/bill-group-members/${id}/`] as const;
};

export const getSplitBillsBillGroupMembersRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof splitBillsBillGroupMembersRetrieve>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSplitBillsBillGroupMembersRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof splitBillsBillGroupMembersRetrieve>>
  > = ({ signal }) => splitBillsBillGroupMembersRetrieve(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof splitBillsBillGroupMembersRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type SplitBillsBillGroupMembersRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillGroupMembersRetrieve>>
>;
export type SplitBillsBillGroupMembersRetrieveQueryError = unknown;

export function useSplitBillsBillGroupMembersRetrieve<
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersRetrieve>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof splitBillsBillGroupMembersRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof splitBillsBillGroupMembersRetrieve>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useSplitBillsBillGroupMembersRetrieve<
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof splitBillsBillGroupMembersRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof splitBillsBillGroupMembersRetrieve>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useSplitBillsBillGroupMembersRetrieve<
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof splitBillsBillGroupMembersRetrieve>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useSplitBillsBillGroupMembersRetrieve<
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof splitBillsBillGroupMembersRetrieve>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getSplitBillsBillGroupMembersRetrieveQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const splitBillsBillGroupMembersUpdate = (
  id: string,
  billGroupMember: NonReadonly<BillGroupMember>,
) => {
  return customAxios<BillGroupMember>({
    url: `/api/split-bills/bill-group-members/${id}/`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: billGroupMember,
  });
};

export const getSplitBillsBillGroupMembersUpdateMutationOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<BillGroupMember> },
    TContext
  >;
}) => {
  const mutationKey = ["splitBillsBillGroupMembersUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof splitBillsBillGroupMembersUpdate>>,
    { id: string; data: NonReadonly<BillGroupMember> }
  > = (props) => {
    const { id, data } = props ?? {};

    return splitBillsBillGroupMembersUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<BillGroupMember> },
    TContext
  >;
};

export type SplitBillsBillGroupMembersUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillGroupMembersUpdate>>
>;
export type SplitBillsBillGroupMembersUpdateMutationBody =
  NonReadonly<BillGroupMember>;
export type SplitBillsBillGroupMembersUpdateMutationError = unknown;

export const useSplitBillsBillGroupMembersUpdate = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<BillGroupMember> },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { id: string; data: NonReadonly<BillGroupMember> },
  TContext
> => {
  const mutationOptions =
    getSplitBillsBillGroupMembersUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const splitBillsBillGroupMembersPartialUpdate = (
  id: string,
  patchedBillGroupMember: NonReadonly<PatchedBillGroupMember>,
) => {
  return customAxios<BillGroupMember>({
    url: `/api/split-bills/bill-group-members/${id}/`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: patchedBillGroupMember,
  });
};

export const getSplitBillsBillGroupMembersPartialUpdateMutationOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersPartialUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<PatchedBillGroupMember> },
    TContext
  >;
}) => {
  const mutationKey = ["splitBillsBillGroupMembersPartialUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof splitBillsBillGroupMembersPartialUpdate>>,
    { id: string; data: NonReadonly<PatchedBillGroupMember> }
  > = (props) => {
    const { id, data } = props ?? {};

    return splitBillsBillGroupMembersPartialUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<PatchedBillGroupMember> },
    TContext
  >;
};

export type SplitBillsBillGroupMembersPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillGroupMembersPartialUpdate>>
>;
export type SplitBillsBillGroupMembersPartialUpdateMutationBody =
  NonReadonly<PatchedBillGroupMember>;
export type SplitBillsBillGroupMembersPartialUpdateMutationError = unknown;

export const useSplitBillsBillGroupMembersPartialUpdate = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersPartialUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<PatchedBillGroupMember> },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { id: string; data: NonReadonly<PatchedBillGroupMember> },
  TContext
> => {
  const mutationOptions =
    getSplitBillsBillGroupMembersPartialUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const splitBillsBillGroupMembersDestroy = (id: string) => {
  return customAxios<void>({
    url: `/api/split-bills/bill-group-members/${id}/`,
    method: "DELETE",
  });
};

export const getSplitBillsBillGroupMembersDestroyMutationOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersDestroy>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: string }, TContext>;
}) => {
  const mutationKey = ["splitBillsBillGroupMembersDestroy"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof splitBillsBillGroupMembersDestroy>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return splitBillsBillGroupMembersDestroy(id);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: string },
    TContext
  >;
};

export type SplitBillsBillGroupMembersDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillGroupMembersDestroy>>
>;

export type SplitBillsBillGroupMembersDestroyMutationError = unknown;

export const useSplitBillsBillGroupMembersDestroy = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupMembersDestroy>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: string }, TContext>;
}): UseMutationResult<TData, TError, { id: string }, TContext> => {
  const mutationOptions =
    getSplitBillsBillGroupMembersDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};
export const splitBillsBillGroupsList = (signal?: AbortSignal) => {
  return customAxios<BillGroup[]>({
    url: `/api/split-bills/bill-groups/`,
    method: "GET",
    signal,
  });
};

export const getSplitBillsBillGroupsListQueryKey = () => {
  return [`/api/split-bills/bill-groups/`] as const;
};

export const getSplitBillsBillGroupsListQueryOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof splitBillsBillGroupsList>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSplitBillsBillGroupsListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof splitBillsBillGroupsList>>
  > = ({ signal }) => splitBillsBillGroupsList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof splitBillsBillGroupsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type SplitBillsBillGroupsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillGroupsList>>
>;
export type SplitBillsBillGroupsListQueryError = unknown;

export function useSplitBillsBillGroupsList<
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsList>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof splitBillsBillGroupsList>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof splitBillsBillGroupsList>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useSplitBillsBillGroupsList<
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof splitBillsBillGroupsList>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof splitBillsBillGroupsList>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useSplitBillsBillGroupsList<
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof splitBillsBillGroupsList>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useSplitBillsBillGroupsList<
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof splitBillsBillGroupsList>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getSplitBillsBillGroupsListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const splitBillsBillGroupsCreate = (
  billGroup: NonReadonly<BillGroup>,
  signal?: AbortSignal,
) => {
  return customAxios<BillGroup>({
    url: `/api/split-bills/bill-groups/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: billGroup,
    signal,
  });
};

export const getSplitBillsBillGroupsCreateMutationOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<BillGroup> },
    TContext
  >;
}) => {
  const mutationKey = ["splitBillsBillGroupsCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof splitBillsBillGroupsCreate>>,
    { data: NonReadonly<BillGroup> }
  > = (props) => {
    const { data } = props ?? {};

    return splitBillsBillGroupsCreate(data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<BillGroup> },
    TContext
  >;
};

export type SplitBillsBillGroupsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillGroupsCreate>>
>;
export type SplitBillsBillGroupsCreateMutationBody = NonReadonly<BillGroup>;
export type SplitBillsBillGroupsCreateMutationError = unknown;

export const useSplitBillsBillGroupsCreate = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<BillGroup> },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { data: NonReadonly<BillGroup> },
  TContext
> => {
  const mutationOptions = getSplitBillsBillGroupsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const splitBillsBillGroupsRetrieve = (
  id: string,
  signal?: AbortSignal,
) => {
  return customAxios<BillGroup>({
    url: `/api/split-bills/bill-groups/${id}/`,
    method: "GET",
    signal,
  });
};

export const getSplitBillsBillGroupsRetrieveQueryKey = (id: string) => {
  return [`/api/split-bills/bill-groups/${id}/`] as const;
};

export const getSplitBillsBillGroupsRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof splitBillsBillGroupsRetrieve>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSplitBillsBillGroupsRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof splitBillsBillGroupsRetrieve>>
  > = ({ signal }) => splitBillsBillGroupsRetrieve(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof splitBillsBillGroupsRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type SplitBillsBillGroupsRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillGroupsRetrieve>>
>;
export type SplitBillsBillGroupsRetrieveQueryError = unknown;

export function useSplitBillsBillGroupsRetrieve<
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsRetrieve>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof splitBillsBillGroupsRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof splitBillsBillGroupsRetrieve>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useSplitBillsBillGroupsRetrieve<
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof splitBillsBillGroupsRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof splitBillsBillGroupsRetrieve>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useSplitBillsBillGroupsRetrieve<
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof splitBillsBillGroupsRetrieve>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useSplitBillsBillGroupsRetrieve<
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof splitBillsBillGroupsRetrieve>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getSplitBillsBillGroupsRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const splitBillsBillGroupsUpdate = (
  id: string,
  billGroup: NonReadonly<BillGroup>,
) => {
  return customAxios<BillGroup>({
    url: `/api/split-bills/bill-groups/${id}/`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: billGroup,
  });
};

export const getSplitBillsBillGroupsUpdateMutationOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<BillGroup> },
    TContext
  >;
}) => {
  const mutationKey = ["splitBillsBillGroupsUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof splitBillsBillGroupsUpdate>>,
    { id: string; data: NonReadonly<BillGroup> }
  > = (props) => {
    const { id, data } = props ?? {};

    return splitBillsBillGroupsUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<BillGroup> },
    TContext
  >;
};

export type SplitBillsBillGroupsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillGroupsUpdate>>
>;
export type SplitBillsBillGroupsUpdateMutationBody = NonReadonly<BillGroup>;
export type SplitBillsBillGroupsUpdateMutationError = unknown;

export const useSplitBillsBillGroupsUpdate = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<BillGroup> },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { id: string; data: NonReadonly<BillGroup> },
  TContext
> => {
  const mutationOptions = getSplitBillsBillGroupsUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const splitBillsBillGroupsPartialUpdate = (
  id: string,
  patchedBillGroup: NonReadonly<PatchedBillGroup>,
) => {
  return customAxios<BillGroup>({
    url: `/api/split-bills/bill-groups/${id}/`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: patchedBillGroup,
  });
};

export const getSplitBillsBillGroupsPartialUpdateMutationOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsPartialUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<PatchedBillGroup> },
    TContext
  >;
}) => {
  const mutationKey = ["splitBillsBillGroupsPartialUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof splitBillsBillGroupsPartialUpdate>>,
    { id: string; data: NonReadonly<PatchedBillGroup> }
  > = (props) => {
    const { id, data } = props ?? {};

    return splitBillsBillGroupsPartialUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<PatchedBillGroup> },
    TContext
  >;
};

export type SplitBillsBillGroupsPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillGroupsPartialUpdate>>
>;
export type SplitBillsBillGroupsPartialUpdateMutationBody =
  NonReadonly<PatchedBillGroup>;
export type SplitBillsBillGroupsPartialUpdateMutationError = unknown;

export const useSplitBillsBillGroupsPartialUpdate = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsPartialUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<PatchedBillGroup> },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { id: string; data: NonReadonly<PatchedBillGroup> },
  TContext
> => {
  const mutationOptions =
    getSplitBillsBillGroupsPartialUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const splitBillsBillGroupsDestroy = (id: string) => {
  return customAxios<void>({
    url: `/api/split-bills/bill-groups/${id}/`,
    method: "DELETE",
  });
};

export const getSplitBillsBillGroupsDestroyMutationOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsDestroy>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: string }, TContext>;
}) => {
  const mutationKey = ["splitBillsBillGroupsDestroy"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof splitBillsBillGroupsDestroy>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return splitBillsBillGroupsDestroy(id);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: string },
    TContext
  >;
};

export type SplitBillsBillGroupsDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillGroupsDestroy>>
>;

export type SplitBillsBillGroupsDestroyMutationError = unknown;

export const useSplitBillsBillGroupsDestroy = <
  TData = Awaited<ReturnType<typeof splitBillsBillGroupsDestroy>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: string }, TContext>;
}): UseMutationResult<TData, TError, { id: string }, TContext> => {
  const mutationOptions =
    getSplitBillsBillGroupsDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};
export const splitBillsBillsList = (signal?: AbortSignal) => {
  return customAxios<Bill[]>({
    url: `/api/split-bills/bills/`,
    method: "GET",
    signal,
  });
};

export const getSplitBillsBillsListQueryKey = () => {
  return [`/api/split-bills/bills/`] as const;
};

export const getSplitBillsBillsListQueryOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof splitBillsBillsList>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSplitBillsBillsListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof splitBillsBillsList>>
  > = ({ signal }) => splitBillsBillsList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof splitBillsBillsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type SplitBillsBillsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillsList>>
>;
export type SplitBillsBillsListQueryError = unknown;

export function useSplitBillsBillsList<
  TData = Awaited<ReturnType<typeof splitBillsBillsList>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof splitBillsBillsList>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof splitBillsBillsList>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useSplitBillsBillsList<
  TData = Awaited<ReturnType<typeof splitBillsBillsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof splitBillsBillsList>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof splitBillsBillsList>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useSplitBillsBillsList<
  TData = Awaited<ReturnType<typeof splitBillsBillsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof splitBillsBillsList>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useSplitBillsBillsList<
  TData = Awaited<ReturnType<typeof splitBillsBillsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof splitBillsBillsList>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getSplitBillsBillsListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const splitBillsBillsCreate = (
  bill: NonReadonly<Bill>,
  signal?: AbortSignal,
) => {
  return customAxios<Bill>({
    url: `/api/split-bills/bills/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: bill,
    signal,
  });
};

export const getSplitBillsBillsCreateMutationOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillsCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<Bill> },
    TContext
  >;
}) => {
  const mutationKey = ["splitBillsBillsCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof splitBillsBillsCreate>>,
    { data: NonReadonly<Bill> }
  > = (props) => {
    const { data } = props ?? {};

    return splitBillsBillsCreate(data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<Bill> },
    TContext
  >;
};

export type SplitBillsBillsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillsCreate>>
>;
export type SplitBillsBillsCreateMutationBody = NonReadonly<Bill>;
export type SplitBillsBillsCreateMutationError = unknown;

export const useSplitBillsBillsCreate = <
  TData = Awaited<ReturnType<typeof splitBillsBillsCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<Bill> },
    TContext
  >;
}): UseMutationResult<TData, TError, { data: NonReadonly<Bill> }, TContext> => {
  const mutationOptions = getSplitBillsBillsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const splitBillsBillsRetrieve = (id: string, signal?: AbortSignal) => {
  return customAxios<Bill>({
    url: `/api/split-bills/bills/${id}/`,
    method: "GET",
    signal,
  });
};

export const getSplitBillsBillsRetrieveQueryKey = (id: string) => {
  return [`/api/split-bills/bills/${id}/`] as const;
};

export const getSplitBillsBillsRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillsRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof splitBillsBillsRetrieve>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSplitBillsBillsRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof splitBillsBillsRetrieve>>
  > = ({ signal }) => splitBillsBillsRetrieve(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof splitBillsBillsRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type SplitBillsBillsRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillsRetrieve>>
>;
export type SplitBillsBillsRetrieveQueryError = unknown;

export function useSplitBillsBillsRetrieve<
  TData = Awaited<ReturnType<typeof splitBillsBillsRetrieve>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof splitBillsBillsRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof splitBillsBillsRetrieve>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useSplitBillsBillsRetrieve<
  TData = Awaited<ReturnType<typeof splitBillsBillsRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof splitBillsBillsRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof splitBillsBillsRetrieve>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useSplitBillsBillsRetrieve<
  TData = Awaited<ReturnType<typeof splitBillsBillsRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof splitBillsBillsRetrieve>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useSplitBillsBillsRetrieve<
  TData = Awaited<ReturnType<typeof splitBillsBillsRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof splitBillsBillsRetrieve>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getSplitBillsBillsRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const splitBillsBillsUpdate = (id: string, bill: NonReadonly<Bill>) => {
  return customAxios<Bill>({
    url: `/api/split-bills/bills/${id}/`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: bill,
  });
};

export const getSplitBillsBillsUpdateMutationOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillsUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<Bill> },
    TContext
  >;
}) => {
  const mutationKey = ["splitBillsBillsUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof splitBillsBillsUpdate>>,
    { id: string; data: NonReadonly<Bill> }
  > = (props) => {
    const { id, data } = props ?? {};

    return splitBillsBillsUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<Bill> },
    TContext
  >;
};

export type SplitBillsBillsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillsUpdate>>
>;
export type SplitBillsBillsUpdateMutationBody = NonReadonly<Bill>;
export type SplitBillsBillsUpdateMutationError = unknown;

export const useSplitBillsBillsUpdate = <
  TData = Awaited<ReturnType<typeof splitBillsBillsUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<Bill> },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { id: string; data: NonReadonly<Bill> },
  TContext
> => {
  const mutationOptions = getSplitBillsBillsUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const splitBillsBillsPartialUpdate = (
  id: string,
  patchedBill: NonReadonly<PatchedBill>,
) => {
  return customAxios<Bill>({
    url: `/api/split-bills/bills/${id}/`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: patchedBill,
  });
};

export const getSplitBillsBillsPartialUpdateMutationOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillsPartialUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<PatchedBill> },
    TContext
  >;
}) => {
  const mutationKey = ["splitBillsBillsPartialUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof splitBillsBillsPartialUpdate>>,
    { id: string; data: NonReadonly<PatchedBill> }
  > = (props) => {
    const { id, data } = props ?? {};

    return splitBillsBillsPartialUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<PatchedBill> },
    TContext
  >;
};

export type SplitBillsBillsPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillsPartialUpdate>>
>;
export type SplitBillsBillsPartialUpdateMutationBody = NonReadonly<PatchedBill>;
export type SplitBillsBillsPartialUpdateMutationError = unknown;

export const useSplitBillsBillsPartialUpdate = <
  TData = Awaited<ReturnType<typeof splitBillsBillsPartialUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: string; data: NonReadonly<PatchedBill> },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { id: string; data: NonReadonly<PatchedBill> },
  TContext
> => {
  const mutationOptions =
    getSplitBillsBillsPartialUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const splitBillsBillsDestroy = (id: string) => {
  return customAxios<void>({
    url: `/api/split-bills/bills/${id}/`,
    method: "DELETE",
  });
};

export const getSplitBillsBillsDestroyMutationOptions = <
  TData = Awaited<ReturnType<typeof splitBillsBillsDestroy>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: string }, TContext>;
}) => {
  const mutationKey = ["splitBillsBillsDestroy"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof splitBillsBillsDestroy>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return splitBillsBillsDestroy(id);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: string },
    TContext
  >;
};

export type SplitBillsBillsDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof splitBillsBillsDestroy>>
>;

export type SplitBillsBillsDestroyMutationError = unknown;

export const useSplitBillsBillsDestroy = <
  TData = Awaited<ReturnType<typeof splitBillsBillsDestroy>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: string }, TContext>;
}): UseMutationResult<TData, TError, { id: string }, TContext> => {
  const mutationOptions = getSplitBillsBillsDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};
